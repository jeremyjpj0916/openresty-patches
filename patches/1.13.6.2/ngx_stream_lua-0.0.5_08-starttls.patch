diff -ur a/ngx_stream_lua-0.0.5/src/ngx_stream_lua_request.h b/ngx_stream_lua-0.0.5/src/ngx_stream_lua_request.h
--- a/ngx_stream_lua-0.0.5/src/ngx_stream_lua_request.h	2018-04-22 15:42:58.000000000 -0300
+++ b/ngx_stream_lua-0.0.5/src/ngx_stream_lua_request.h	2018-11-16 19:54:23.361833464 -0200
@@ -21,6 +21,8 @@
 
 typedef struct ngx_stream_lua_request_s  ngx_stream_lua_request_t;
 
+typedef struct ngx_stream_lua_co_ctx_s   ngx_stream_lua_co_ctx_t;
+
 typedef void (*ngx_stream_lua_event_handler_pt)(ngx_stream_lua_request_t *r);
 
 
@@ -32,6 +34,11 @@
 
     ngx_stream_lua_event_handler_pt       read_event_handler;
     ngx_stream_lua_event_handler_pt       write_event_handler;
+
+    /* coroutine context for ngx.req.starttls */
+    ngx_stream_lua_co_ctx_t              *starttls_co_ctx;
+    ngx_event_handler_pt                  starttls_read_handler;
+    ngx_event_handler_pt                  starttls_write_handler;
 };
 
 
diff -ur a/ngx_stream_lua-0.0.5/src/ngx_stream_lua_ssl.c b/ngx_stream_lua-0.0.5/src/ngx_stream_lua_ssl.c
--- a/ngx_stream_lua-0.0.5/src/ngx_stream_lua_ssl.c	2018-11-16 19:45:37.106855045 -0200
+++ b/ngx_stream_lua-0.0.5/src/ngx_stream_lua_ssl.c	2018-11-16 19:47:59.137849220 -0200
@@ -18,6 +18,11 @@
 #include "ddebug.h"
 
 
+
+#include "ngx_stream_lua_util.h"
+
+
+
 #if (NGX_STREAM_SSL)
 
 
@@ -44,4 +49,161 @@
 }
 
 
+static void
+ngx_stream_lua_starttls_ssl_handshake_handler(ngx_connection_t *c)
+{
+    ngx_stream_session_t      *s;
+    ngx_stream_lua_ctx_t      *ctx;
+    ngx_stream_lua_request_t  *r;
+    lua_State                 *L;
+    lua_State                 *vm;
+    ngx_int_t                  rc;
+
+    s = c->data;
+
+    ctx = ngx_stream_get_module_ctx(s, ngx_stream_lua_module);
+
+    r = ctx->request;
+
+    if (c->read->timer_set) {
+        ngx_del_timer(c->read);
+    }
+
+    /* restore states of coroutine and connection */
+    ctx->cur_co_ctx = r->starttls_co_ctx;
+    c->read->handler = r->starttls_read_handler;
+    c->write->handler = r->starttls_write_handler;
+
+    /* push return value */
+    L = ctx->cur_co_ctx->co;
+    lua_pushboolean(L, c->ssl->handshaked);
+
+    /* get main handle of the Lua VM */
+    vm = ngx_stream_lua_get_lua_vm(r, ctx);
+
+    /* continue execution of caller Lua code */
+    rc = ngx_stream_lua_run_thread(vm, r, ctx, 1);
+
+    if (ctx->entered_content_phase) {
+        ngx_stream_lua_finalize_request(r, NGX_DONE);
+
+    } else {
+        ctx->resume_handler = ngx_stream_lua_wev_handler;
+        ngx_stream_lua_core_run_phases(r);
+    }
+
+    return;
+}
+
+
+static ngx_ssl_t*
+ngx_stream_lua_starttls_new_ssl_t(ngx_connection_t *c, SSL_CTX *sslctx)
+{
+    ngx_ssl_t           *ssl;
+    ngx_pool_cleanup_t  *cln;
+
+    ssl = ngx_pcalloc(c->pool, sizeof(ngx_ssl_t));
+    if (ssl == NULL) {
+        return NULL;
+    }
+
+    cln = ngx_pool_cleanup_add(c->pool, 0);
+    if (cln == NULL) {
+        return NULL;
+    }
+
+    if (!SSL_CTX_up_ref(sslctx)) {
+        return NULL;
+    }
+
+    ssl->ctx = sslctx;
+    ssl->log = c->log;
+    ssl->buffer_size = NGX_SSL_BUFSIZE;
+
+    cln->handler = ngx_ssl_cleanup_ctx;
+    cln->data = ssl;
+
+    return ssl;
+}
+
+
+int
+ngx_stream_lua_req_starttls(lua_State *L)
+{
+    int                        top;
+    ngx_stream_lua_request_t  *r;
+    ngx_stream_lua_ctx_t      *ctx;
+    ngx_stream_lua_co_ctx_t   *coctx;
+    ngx_connection_t          *c;
+    SSL_CTX                   *sslctx;
+    ngx_ssl_t                 *ssl;
+    ngx_msec_t                 handshake_timeout;
+    ngx_int_t                  rc;
+
+    r = ngx_stream_lua_get_req(L);
+    if (r == NULL) {
+        return luaL_error(L, "no request found");
+    }
+
+    sslctx = *(SSL_CTX**)luaL_checkudata(L, 1, "SSL_CTX*");
+    handshake_timeout = luaL_optinteger(L, 2, 60000);
+
+    ctx = ngx_stream_lua_get_module_ctx(r, ngx_stream_lua_module);
+    if (ctx == NULL) {
+        return luaL_error(L, "no request ctx found");
+    }
+
+    coctx = ctx->cur_co_ctx;
+    if (coctx == NULL) {
+        return luaL_error(L, "no co ctx found");
+    }
+
+    c = r->connection;
+    if (c == NULL) {
+        return luaL_error(L, "no connection found");
+    }
+
+    ssl = ngx_stream_lua_starttls_new_ssl_t(c, sslctx);
+    if (ssl == NULL) {
+        return luaL_error(L, "could not create ssl_t object");
+    }
+
+    /* store states of coroutine and connection */
+    r->starttls_co_ctx = coctx;
+    r->starttls_read_handler = c->read->handler;
+    r->starttls_write_handler = c->write->handler;
+    
+    if (ngx_ssl_create_connection(ssl, c, 0) != NGX_OK) {
+        return NGX_ERROR;
+    }
+
+    rc = ngx_ssl_handshake(c);
+
+    if (rc == NGX_ERROR) {
+        lua_pushboolean(L, 0);
+        return 1;
+    }
+
+    /* Continuation logic similar to ngx_stream_lua_socket_tcp_sslhandshake: */
+
+    if (rc == NGX_AGAIN) {
+        if (c->write->timer_set) {
+            ngx_del_timer(c->write);
+        }
+
+        ngx_add_timer(c->read, handshake_timeout);
+
+        c->ssl->handler = ngx_stream_lua_starttls_ssl_handshake_handler;
+        
+        /* XXX Do we need to set r->write_event_handler here? */
+
+        return lua_yield(L, 0);
+    }
+
+    top = lua_gettop(L);
+    ngx_stream_lua_starttls_ssl_handshake_handler(c);
+    return lua_gettop(L) - top;
+}
+
+
 #endif /* NGX_STREAM_SSL */
diff -ur a/ngx_stream_lua-0.0.5/src/ngx_stream_lua_ssl.h b/ngx_stream_lua-0.0.5/src/ngx_stream_lua_ssl.h
--- a/ngx_stream_lua-0.0.5/src/ngx_stream_lua_ssl.h	2018-11-13 15:19:32.740138984 -0200
+++ b/ngx_stream_lua-0.0.5/src/ngx_stream_lua_ssl.h	2018-11-13 15:20:11.900137379 -0200
@@ -49,6 +49,8 @@
 extern int ngx_stream_lua_ssl_ctx_index;
 
 
+int ngx_stream_lua_req_starttls(lua_State *L);
+
 #endif
 
 
diff -ur a/ngx_stream_lua-0.0.5/src/ngx_stream_lua_util.c b/ngx_stream_lua-0.0.5/src/ngx_stream_lua_util.c
--- a/ngx_stream_lua-0.0.5/src/ngx_stream_lua_util.c	2018-11-13 15:19:32.741138984 -0200
+++ b/ngx_stream_lua-0.0.5/src/ngx_stream_lua_util.c	2018-11-13 15:20:11.900137379 -0200
@@ -1871,11 +1871,14 @@
 {
     /* ngx.req table */
 
-    lua_createtable(L, 0 /* narr */, 24 /* nrec */);    /* .req */
+    lua_createtable(L, 0 /* narr */, 25 /* nrec */);    /* .req */
 
     lua_pushcfunction(L, ngx_stream_lua_req_socket);
     lua_setfield(L, -2, "socket");
 
+    lua_pushcfunction(L, ngx_stream_lua_req_starttls);
+    lua_setfield(L, -2, "starttls");
+
     ngx_stream_lua_inject_req_time_api(L);
 
     lua_setfield(L, -2, "req");
